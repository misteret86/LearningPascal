{$R+} { Range Checking }
{$B+} { Complete Boolean Evaluation }

program TesteBlattMax (input, output);

  type
    tNatZahl = 1..maxint;
    tRefBinBaum = ^tBinBaum;
    tBinBaum = record
                 Wert:tNatZahl;
                 links:tRefBinBaum;
                 rechts:tRefBinBaum
             end;
           
  var
    Wurzel : tRefBinBaum;
    blaetterSindMax : Boolean;
  
  function BlattMax ( inRefWurzel : tRefBinBaum; pfadMax : tNatZahl) : Boolean;
    { prüft ob alle Blätter des Baumes die Maxima der Pfade zu ihnen sind }
    { - rekursive Funktion, die einen Binärbaum mit mindestens zwei 
        Knoten übergeben bekommt und den gesamten Baum durchläuft. 
      - Ihre Funktion entscheidet
      *   ob der Wert jedes Blattes des Baumes größer ist als jeder 
      *   der Werte der Knoten auf dem Pfad von der Wurzel zu diesem 
      *   Blatt. 
      - Neben dem üblichen Zeiger auf die Baumwurzel ist ein weiterer 
        Übergabeparameter erforderlich. 
        Kommentieren Sie, mit welchem Wert dieser beim ersten Aufruf zu 
        belegen ist }
    { ****************** MEIN CODE START ******************}
    { pfadMax beim ersten Aufruf = 1. Bei jeder Rekursion wird das auf
      dem Pfad liegende Maximum aktualisiert und am Ende dieses mit dem 
      Wert des Blattes verglichen. }
    var
    Vater : tRefBinBaum;
    Sohnlinks : tRefBinBaum;
    Sohnrechts : tRefBinBaum;
    Maxrechts : tNatZahl;
    Maxlinks : tNatZahl;
    Checkrechts : boolean;
    Checklinks : boolean;
        
  begin
    Vater := inRefWurzel;
    Sohnlinks := Vater^.links;
    Sohnrechts := Vater^.rechts;
    Checklinks := true;
    Checkrechts := true;

    if Vater^.Wert > pfadMax then
       pfadMax := Vater^.Wert;
    
    if Sohnrechts <> nil then
      { Endbedingung fuer rechten Knotenteil }
      if ( Sohnrechts^.links = nil ) and ( Sohnrechts^.rechts = nil ) then
        if Sohnrechts^.Wert > pfadMax then
          Checkrechts := true
        else 
          Checkrechts := false
      else
      { Wenn nicht, rufe Rekursion auf }
      begin
        if ( Sohnrechts^.Wert > pfadMax ) then
          Maxrechts := Sohnrechts^.Wert
        else
          Maxrechts := pfadMax;
        
        Checkrechts := BlattMax(Sohnrechts, Maxrechts );
        
      end;
      
    if Sohnlinks <> nil then
      { Endbedingung fuer linken Knotenteil }
      if ( Sohnlinks^.links = nil ) and ( Sohnlinks^.rechts = nil ) then
        if Sohnlinks^.Wert > pfadMax then
          Checklinks := true
        else 
          Checklinks := false
      else
      { Wenn nicht, rufe Rekursion auf }
      begin
        if ( Sohnlinks^.Wert > pfadMax ) then
          Maxlinks := Sohnlinks^.Wert
        else
          Maxlinks := pfadMax;
        
        Checklinks := BlattMax(Sohnlinks, Maxlinks );
        
      end;
        
    if Checklinks and Checkrechts then
      BlattMax := true
    else
      BlattMax := false;
      
  end; { function BlattMax }  
    { ****************** MEIN CODE STOP *******************}

  procedure BaumAufbauen (var outWurzel : tRefBinBaum) ;
    var 
      index,
      Zahl : integer;
      elter, neuerKnoten : tRefBinBaum;    
       
    function KnotenVonIndex (baum : tRefBinBaum; index : integer) : tRefBinBaum;
      var
        elter : tRefBinBaum;
      begin
        if (index = 1) then
          KnotenVonIndex := baum
        else
        begin
          elter := KnotenVonIndex(baum, index div 2);
          if ( (index mod 2 ) = 0 ) then
            KnotenVonIndex := elter^.links
          else
            KnotenVonIndex := elter^.rechts
        end;
      end;

  begin
    read (index);

    new (outWurzel);
    read (Zahl);
    outWurzel^.Wert := Zahl;
    outWurzel^.links := nil;
    outWurzel^.rechts := nil;

    read (index);
    while (index <> 0) do
    begin            
      elter := KnotenVonIndex(outWurzel, index div 2);
       
      new (neuerKnoten);
      read (Zahl);    
      neuerKnoten^.Wert := Zahl;  
      neuerKnoten^.links := nil;
      neuerKnoten^.rechts := nil;

      if ( (index mod 2 ) = 0 ) then
        elter^.links := neuerKnoten
      else
        elter^.rechts := neuerKnoten;
           
      read (index);      
    end;    
  end; { BaumAufbauen }
  
  
  procedure BBKnotenEinfuegen (
                  inZahl : integer;
              var ioRefWurzel : tRefBinBaum);
  { fuegt in den Suchbaum, auf dessen Wurzel ioRefWurzel
    zeigt, ein Blatt mit Wert inZahl an }
    
    var
    
    RefSohn,
    RefVater : tRefBinBaum;
    gefunden : boolean;
  begin
    RefSohn := ioRefWurzel;
    gefunden := false;
    while (RefSohn <> nil) and (not gefunden) do
    begin
      if RefSohn^.Wert = inZahl then
        gefunden := true
      else
      begin
        RefVater := RefSohn;
        if inZahl < RefSohn^.Wert then
          RefSohn := RefSohn^.links
        else
          RefSohn := RefSohn^.rechts
      end
    end; { while }
    
    if not gefunden then
    { neuen Knoten anlegen }
    begin
      new (RefSohn);
      RefSohn^.Wert := inZahl;
      RefSohn^.links := nil;
      RefSohn^.rechts := nil;
      { neu angelegten Knoten einfuegen }
      if ioRefWurzel = nil then
        { Baum war leer, neue Wurzel zurueckgeben }
        ioRefWurzel := RefSohn
      else
        if inZahl < RefVater^.Wert then
          { Sohn links anhaengen }
          RefVater^.links := RefSohn
        else
          { Sohn rechts anhaengen }
          RefVater^.rechts := RefSohn
      end
    end;  

  procedure BBAufbauen (var outRefWurzel :tRefBinBaum);
  { baut fuer eine Eingabe von integer-Zahlen <> 0 einen
  Suchbaum auf und gibt einen Zeiger auf dessen Wurzel
  in outRefWurzel zurueck }
    var 
    Zahl : integer;
    
  begin
  { outRefWurzel mit leerem Baum initialisieren }
    outRefWurzel := nil;
    readln(Zahl);
    while Zahl <> 0 do
    begin
      BBKnotenEinfuegen(Zahl, outRefWurzel);
      readln(Zahl);
    end
  end; { BBAufbauen }



begin
  writeln('Bitte Baum in level-order eingeben Eingabeformat: Immer erst der Index eines Knotens, dann dessen Wert:');
  BaumAufbauen (Wurzel);
  {writeln('Geben Sie Werte für einen binaeren Baum ein');
  BBAufbauen(Wurzel);
  writeln('Done');}
  
  blaetterSindMax := BlattMax(Wurzel, 1);
  
  if blaetterSindMax then
    writeln ('Alle Blaetter sind groesser als alle Knoten auf den jeweiligen Pfaden zu ihnen.')
  else
    writeln ('Mind. ein Blatt ist nicht groesser als alle Knoten auf seinem Pfad.');

end. { TesteBBKnotenzahl }
